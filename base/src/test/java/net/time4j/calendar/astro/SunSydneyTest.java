package net.time4j.calendar.astro;

import net.time4j.ClockUnit;
import net.time4j.Moment;
import net.time4j.PlainDate;
import net.time4j.PlainTime;
import net.time4j.PlainTimestamp;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.text.ParseException;
import java.util.Arrays;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;


@RunWith(Parameterized.class)
public class SunSydneyTest {

    @Parameterized.Parameters(name= "sunrise/sunset-sydney-in-year-2017({0}=> {2}, {3} / eqt={1})")
    public static Iterable<Object[]> data() { // NOAA-data for year 2017
        return Arrays.asList(
            new Object[][] {
                // January
                {1, -3.46, "05:48", "20:09"},
                {2, -3.93, "05:49", "20:10"},
                {3, -4.39, "05:49", "20:10"},
                {4, -4.84, "05:50", "20:10"},
                {5, -5.29, "05:51", "20:10"},
                {6, -5.74, "05:52", "20:10"},
                {7, -6.17, "05:53", "20:10"},
                {8, -6.60, "05:53", "20:10"},
                {9, -7.02, "05:54", "20:10"},
                {10, -7.43, "05:55", "20:10"},
                {11, -7.83, "05:56", "20:10"},
                {12, -8.22, "05:57", "20:10"},
                {13, -8.60, "05:58", "20:09"},
                {14, -8.97, "05:59", "20:09"},
                {15, -9.33, "06:00", "20:09"},
                {16, -9.68, "06:01", "20:09"},
                {17, -10.01, "06:02", "20:08"},
                {18, -10.34, "06:03", "20:08"},
                {19, -10.65, "06:04", "20:08"},
                {20, -10.95, "06:05", "20:07"},
                {21, -11.24, "06:06", "20:07"},
                {22, -11.52, "06:07", "20:06"},
                {23, -11.78, "06:08", "20:06"},
                {24, -12.03, "06:09", "20:05"},
                {25, -12.27, "06:10", "20:05"},
                {26, -12.50, "06:11", "20:04"},
                {27, -12.71, "06:12", "20:04"},
                {28, -12.90, "06:13", "20:03"},
                {29, -13.09, "06:14", "20:03"},
                {30, -13.26, "06:15", "20:02"},
                {31, -13.42, "06:16", "20:01"},

                // February
                {32, -13.56, "06:17", "20:00"},
                {33, -13.69, "06:18", "20:00"},
                {34, -13.80, "06:19", "19:59"},
                {35, -13.91, "06:20", "19:58"},
                {36, -13.99, "06:21", "19:57"},
                {37, -14.07, "06:22", "19:56"},
                {38, -14.13, "06:23", "19:56"},
                {39, -14.18, "06:24", "19:55"},
                {40, -14.21, "06:25", "19:54"},
                {41, -14.23, "06:26", "19:53"},
                {42, -14.24, "06:26", "19:52"},
                {43, -14.24, "06:27", "19:51"},
                {44, -14.22, "06:28", "19:50"},
                {45, -14.19, "06:29", "19:49"},
                {46, -14.15, "06:30", "19:48"},
                {47, -14.09, "06:31", "19:47"},
                {48, -14.02, "06:32", "19:46"},
                {49, -13.95, "06:33", "19:45"},
                {50, -13.86, "06:34", "19:44"},
                {51, -13.75, "06:35", "19:42"},
                {52, -13.64, "06:36", "19:41"},
                {53, -13.52, "06:37", "19:40"},
                {54, -13.38, "06:38", "19:39"},
                {55, -13.24, "06:39", "19:38"},
                {56, -13.09, "06:39", "19:37"},
                {57, -12.92, "06:40", "19:35"},
                {58, -12.75, "06:41", "19:34"},
                {59, -12.57, "06:42", "19:33"},

                // March
                {60, -12.38, "06:43", "19:32"},
                {61, -12.18, "06:44", "19:30"},
                {62, -11.97, "06:45", "19:29"},
                {63, -11.76, "06:45", "19:28"},
                {64, -11.53, "06:46", "19:27"},
                {65, -11.30, "06:47", "19:25"},
                {66, -11.07, "06:48", "19:24"},
                {67, -10.82, "06:49", "19:23"},
                {68, -10.57, "06:49", "19:21"},
                {69, -10.32, "06:50", "19:20"},
                {70, -10.06, "06:51", "19:19"},
                {71, -9.79, "06:52", "19:18"},
                {72, -9.52, "06:53", "19:16"},
                {73, -9.25, "06:53", "19:15"},
                {74, -8.97, "06:54", "19:14"},
                {75, -8.68, "06:55", "19:12"},
                {76, -8.40, "06:56", "19:11"},
                {77, -8.11, "06:57", "19:09"},
                {78, -7.82, "06:57", "19:08"},
                {79, -7.52, "06:58", "19:07"},
                {80, -7.22, "06:59", "19:05"},
                {81, -6.93, "07:00", "19:04"},
                {82, -6.63, "07:00", "19:03"},
                {83, -6.33, "07:01", "19:01"},
                {84, -6.02, "07:02", "19:00"},
                {85, -5.72, "07:03", "18:59"},
                {86, -5.42, "07:03", "18:57"},
                {87, -5.12, "07:04", "18:56"},
                {88, -4.82, "07:05", "18:55"},
                {89, -4.52, "07:06", "18:53"},
                {90, -4.22, "07:06", "18:52"},

                // April
                {91, -3.91, "07:07", "18:51"},
                {92, -3.61, "06:08", "17:49"},
                {93, -3.32, "06:09", "17:48"},
                {94, -3.03, "06:09", "17:47"},
                {95, -2.74, "06:10", "17:45"},
                {96, -2.46, "06:11", "17:44"},
                {97, -2.17, "06:12", "17:43"},
                {98, -1.90, "06:12", "17:41"},
                {99, -1.62, "06:13", "17:40"},
                {100, -1.35, "06:14", "17:39"},
                {101, -1.09, "06:15", "17:38"},
                {102, -0.83, "06:15", "17:36"},
                {103, -0.57, "06:16", "17:35"},
                {104, -0.32, "06:17", "17:34"},
                {105, -0.08, "06:18", "17:33"},
                {106, 0.16, "06:18", "17:31"},
                {107, 0.39, "06:19", "17:30"},
                {108, 0.62, "06:20", "17:29"},
                {109, 0.83, "06:21", "17:28"},
                {110, 1.05, "06:21", "17:27"},
                {111, 1.25, "06:22", "17:25"},
                {112, 1.45, "06:23", "17:24"},
                {113, 1.64, "06:24", "17:23"},
                {114, 1.82, "06:24", "17:22"},
                {115, 2.00, "06:25", "17:21"},
                {116, 2.17, "06:26", "17:20"},
                {117, 2.32, "06:27", "17:19"},
                {118, 2.47, "06:27", "17:18"},
                {119, 2.62, "06:28", "17:17"},
                {120, 2.75, "06:29", "17:16"},

                // May
                {121, 2.87, "06:30", "17:15"},
                {122, 2.99, "06:30", "17:14"},
                {123, 3.10, "06:31", "17:13"},
                {124, 3.19, "06:32", "17:12"},
                {125, 3.28, "06:33", "17:11"},
                {126, 3.36, "06:33", "17:10"},
                {127, 3.43, "06:34", "17:09"},
                {128, 3.49, "06:35", "17:08"},
                {129, 3.54, "06:36", "17:07"},
                {130, 3.58, "06:36", "17:07"},
                {131, 3.61, "06:37", "17:06"},
                {132, 3.63, "06:38", "17:05"},
                {133, 3.65, "06:39", "17:04"},
                {134, 3.65, "06:39", "17:03"},
                {135, 3.64, "06:40", "17:03"},
                {136, 3.63, "06:41", "17:02"},
                {137, 3.60, "06:42", "17:01"},
                {138, 3.57, "06:42", "17:01"},
                {139, 3.52, "06:43", "17:00"},
                {140, 3.47, "06:44", "17:00"},
                {141, 3.41, "06:44", "16:59"},
                {142, 3.34, "06:45", "16:58"},
                {143, 3.26, "06:46", "16:58"},
                {144, 3.17, "06:46", "16:57"},
                {145, 3.08, "06:47", "16:57"},
                {146, 2.97, "06:48", "16:56"},
                {147, 2.86, "06:48", "16:56"},
                {148, 2.74, "06:49", "16:56"},
                {149, 2.61, "06:50", "16:55"},
                {150, 2.48, "06:50", "16:55"},
                {151, 2.33, "06:51", "16:55"},

                // June
                {152, 2.18, "06:51", "16:54"},
                {153, 2.03, "06:52", "16:54"},
                {154, 1.87, "06:53", "16:54"},
                {155, 1.70, "06:53", "16:54"},
                {156, 1.53, "06:54", "16:53"},
                {157, 1.35, "06:54", "16:53"},
                {158, 1.16, "06:55", "16:53"},
                {159, 0.97, "06:55", "16:53"},
                {160, 0.78, "06:56", "16:53"},
                {161, 0.58, "06:56", "16:53"},
                {162, 0.38, "06:57", "16:53"},
                {163, 0.18, "06:57", "16:53"},
                {164, -0.03, "06:57", "16:53"},
                {165, -0.24, "06:58", "16:53"},
                {166, -0.45, "06:58", "16:53"},
                {167, -0.67, "06:59", "16:53"},
                {168, -0.88, "06:59", "16:53"},
                {169, -1.10, "06:59", "16:53"},
                {170, -1.32, "06:59", "16:54"},
                {171, -1.53, "07:00", "16:54"},
                {172, -1.75, "07:00", "16:54"},
                {173, -1.97, "07:00", "16:54"},
                {174, -2.18, "07:00", "16:54"},
                {175, -2.40, "07:01", "16:55"},
                {176, -2.61, "07:01", "16:55"},
                {177, -2.82, "07:01", "16:55"},
                {178, -3.03, "07:01", "16:56"},
                {179, -3.24, "07:01", "16:56"},
                {180, -3.44, "07:01", "16:56"},
                {181, -3.64, "07:01", "16:57"},

                // July
                {182, -3.84, "07:01", "16:57"},
                {183, -4.03, "07:01", "16:58"},
                {184, -4.21, "07:01", "16:58"},
                {185, -4.39, "07:01", "16:59"},
                {186, -4.57, "07:01", "16:59"},
                {187, -4.74, "07:01", "16:59"},
                {188, -4.90, "07:00", "17:00"},
                {189, -5.06, "07:00", "17:00"},
                {190, -5.21, "07:00", "17:01"},
                {191, -5.36, "07:00", "17:02"},
                {192, -5.50, "06:59", "17:02"},
                {193, -5.63, "06:59", "17:03"},
                {194, -5.75, "06:59", "17:03"},
                {195, -5.86, "06:58", "17:04"},
                {196, -5.97, "06:58", "17:04"},
                {197, -6.07, "06:58", "17:05"},
                {198, -6.15, "06:57", "17:06"},
                {199, -6.24, "06:57", "17:06"},
                {200, -6.31, "06:56", "17:07"},
                {201, -6.37, "06:56", "17:08"},
                {202, -6.42, "06:55", "17:08"},
                {203, -6.46, "06:55", "17:09"},
                {204, -6.50, "06:54", "17:10"},
                {205, -6.52, "06:54", "17:10"},
                {206, -6.54, "06:53", "17:11"},
                {207, -6.54, "06:52", "17:12"},
                {208, -6.53, "06:52", "17:12"},
                {209, -6.52, "06:51", "17:13"},
                {210, -6.49, "06:50", "17:14"},
                {211, -6.46, "06:49", "17:14"},
                {212, -6.41, "06:49", "17:15"},

                // August
                {213, -6.35, "06:48", "17:16"},
                {214, -6.29, "06:47", "17:16"},
                {215, -6.21, "06:46", "17:17"},
                {216, -6.13, "06:45", "17:18"},
                {217, -6.03, "06:44", "17:18"},
                {218, -5.92, "06:43", "17:19"},
                {219, -5.81, "06:42", "17:20"},
                {220, -5.68, "06:42", "17:21"},
                {221, -5.54, "06:41", "17:21"},
                {222, -5.40, "06:40", "17:22"},
                {223, -5.24, "06:39", "17:23"},
                {224, -5.08, "06:38", "17:23"},
                {225, -4.90, "06:37", "17:24"},
                {226, -4.72, "06:35", "17:25"},
                {227, -4.53, "06:34", "17:26"},
                {228, -4.33, "06:33", "17:26"},
                {229, -4.12, "06:32", "17:27"},
                {230, -3.90, "06:31", "17:28"},
                {231, -3.68, "06:30", "17:28"},
                {232, -3.44, "06:29", "17:29"},
                {233, -3.20, "06:28", "17:30"},
                {234, -2.95, "06:26", "17:30"},
                {235, -2.69, "06:25", "17:31"},
                {236, -2.43, "06:24", "17:32"},
                {237, -2.16, "06:23", "17:32"},
                {238, -1.88, "06:22", "17:33"},
                {239, -1.59, "06:20", "17:34"},
                {240, -1.30, "06:19", "17:34"},
                {241, -1.01, "06:18", "17:35"},
                {242, -0.70, "06:16", "17:36"},
                {243, -0.39, "06:15", "17:37"},

                // September
                {244, -0.08, "06:14", "17:37"},
                {245, 0.24, "06:13", "17:38"},
                {246, 0.56, "06:11", "17:39"},
                {247, 0.89, "06:10", "17:39"},
                {248, 1.22, "06:09", "17:40"},
                {249, 1.55, "06:07", "17:41"},
                {250, 1.89, "06:06", "17:41"},
                {251, 2.23, "06:05", "17:42"},
                {252, 2.58, "06:03", "17:43"},
                {253, 2.93, "06:02", "17:43"},
                {254, 3.28, "06:00", "17:44"},
                {255, 3.63, "05:59", "17:45"},
                {256, 3.98, "05:58", "17:45"},
                {257, 4.34, "05:56", "17:46"},
                {258, 4.69, "05:55", "17:47"},
                {259, 5.05, "05:54", "17:47"},
                {260, 5.40, "05:52", "17:48"},
                {261, 5.76, "05:51", "17:49"},
                {262, 6.12, "05:49", "17:49"},
                {263, 6.47, "05:48", "17:50"},
                {264, 6.83, "05:47", "17:51"},
                {265, 7.18, "05:45", "17:51"},
                {266, 7.54, "05:44", "17:52"},
                {267, 7.89, "05:42", "17:53"},
                {268, 8.23, "05:41", "17:54"},
                {269, 8.58, "05:40", "17:54"},
                {270, 8.92, "05:38", "17:55"},
                {271, 9.26, "05:37", "17:56"},
                {272, 9.60, "05:35", "17:56"},
                {273, 9.93, "05:34", "17:57"},

                // October
                {274, 10.25, "06:33", "18:58"},
                {275, 10.58, "06:31", "18:59"},
                {276, 10.89, "06:30", "18:59"},
                {277, 11.21, "06:29", "19:00"},
                {278, 11.51, "06:27", "19:01"},
                {279, 11.81, "06:26", "19:01"},
                {280, 12.11, "06:25", "19:02"},
                {281, 12.39, "06:23", "19:03"},
                {282, 12.67, "06:22", "19:04"},
                {283, 12.95, "06:21", "19:04"},
                {284, 13.21, "06:19", "19:05"},
                {285, 13.47, "06:18", "19:06"},
                {286, 13.72, "06:17", "19:07"},
                {287, 13.96, "06:15", "19:08"},
                {288, 14.19, "06:14", "19:08"},
                {289, 14.41, "06:13", "19:09"},
                {290, 14.62, "06:12", "19:10"},
                {291, 14.82, "06:10", "19:11"},
                {292, 15.02, "06:09", "19:12"},
                {293, 15.20, "06:08", "19:13"},
                {294, 15.37, "06:07", "19:13"},
                {295, 15.53, "06:06", "19:14"},
                {296, 15.67, "06:05", "19:15"},
                {297, 15.81, "06:03", "19:16"},
                {298, 15.93, "06:02", "19:17"},
                {299, 16.04, "06:01", "19:18"},
                {300, 16.14, "06:00", "19:19"},
                {301, 16.23, "05:59", "19:19"},
                {302, 16.31, "05:58", "19:20"},
                {303, 16.37, "05:57", "19:21"},
                {304, 16.42, "05:56", "19:22"},

                // November
                {305, 16.45, "05:55", "19:23"},
                {306, 16.47, "05:54", "19:24"},
                {307, 16.48, "05:53", "19:25"},
                {308, 16.48, "05:52", "19:26"},
                {309, 16.46, "05:51", "19:27"},
                {310, 16.42, "05:50", "19:28"},
                {311, 16.38, "05:50", "19:29"},
                {312, 16.31, "05:49", "19:30"},
                {313, 16.24, "05:48", "19:30"},
                {314, 16.15, "05:47", "19:31"},
                {315, 16.04, "05:46", "19:32"},
                {316, 15.92, "05:46", "19:33"},
                {317, 15.79, "05:45", "19:34"},
                {318, 15.64, "05:44", "19:35"},
                {319, 15.48, "05:44", "19:36"},
                {320, 15.30, "05:43", "19:37"},
                {321, 15.11, "05:43", "19:38"},
                {322, 14.91, "05:42", "19:39"},
                {323, 14.69, "05:41", "19:40"},
                {324, 14.46, "05:41", "19:41"},
                {325, 14.21, "05:40", "19:42"},
                {326, 13.95, "05:40", "19:43"},
                {327, 13.68, "05:40", "19:44"},
                {328, 13.40, "05:39", "19:45"},
                {329, 13.10, "05:39", "19:46"},
                {330, 12.79, "05:39", "19:47"},
                {331, 12.47, "05:38", "19:48"},
                {332, 12.13, "05:38", "19:48"},
                {333, 11.78, "05:38", "19:49"},
                {334, 11.43, "05:38", "19:50"},

                // December
                {335, 11.06, "05:37", "19:51"},
                {336, 10.68, "05:37", "19:52"},
                {337, 10.29, "05:37", "19:53"},
                {338, 9.89, "05:37", "19:54"},
                {339, 9.48, "05:37", "19:55"},
                {340, 9.06, "05:37", "19:55"},
                {341, 8.64, "05:37", "19:56"},
                {342, 8.20, "05:37", "19:57"},
                {343, 7.76, "05:37", "19:58"},
                {344, 7.31, "05:37", "19:59"},
                {345, 6.86, "05:38", "19:59"},
                {346, 6.39, "05:38", "20:00"},
                {347, 5.93, "05:38", "20:01"},
                {348, 5.45, "05:38", "20:01"},
                {349, 4.98, "05:39", "20:02"},
                {350, 4.49, "05:39", "20:03"},
                {351, 4.01, "05:39", "20:03"},
                {352, 3.52, "05:40", "20:04"},
                {353, 3.03, "05:40", "20:04"},
                {354, 2.53, "05:40", "20:05"},
                {355, 2.04, "05:41", "20:06"},
                {356, 1.54, "05:41", "20:06"},
                {357, 1.05, "05:42", "20:06"},
                {358, 0.55, "05:42", "20:07"},
                {359, 0.06, "05:43", "20:07"},
                {360, -0.44, "05:44", "20:08"},
                {361, -0.93, "05:44", "20:08"},
                {362, -1.42, "05:45", "20:08"},
                {363, -1.90, "05:45", "20:09"},
                {364, -2.39, "05:46", "20:09"},
                {365, -2.87, "05:47", "20:09"}
            }
        );
    }

    private int doy; // day-of-year
    private double eqt; // in minutes
    private int hourSunrise;
    private int minuteSunrise;
    private int hourSunset;
    private int minuteSunset;

    public SunSydneyTest(
        int doy,
        double eqt,
        String sunrise,
        String sunset
    ) throws ParseException {
        super();

        this.doy = doy;
        this.eqt = eqt;
        this.hourSunrise = Integer.parseInt(sunrise.substring(0, 2));
        this.minuteSunrise = Integer.parseInt(sunrise.substring(3));
        this.hourSunset = Integer.parseInt(sunset.substring(0, 2));
        this.minuteSunset = Integer.parseInt(sunset.substring(3));
    }

    @Test
    public void simpleSunrise() {
        SolarTime sydney = SolarTime.ofLocation(-33.85, 151.2, 0, "SIMPLE");
        PlainDate date = PlainDate.of(2017, this.doy);
        PlainTime sunrise = date.get(sydney.sunrise()).get().toZonalTimestamp("Australia/Sydney").toTime();
        PlainTime expected = PlainTime.of(this.hourSunrise, this.minuteSunrise);
        assertThat(
            sunrise.toString(),
            Math.abs(ClockUnit.MINUTES.between(expected, sunrise)) <= 2,
            is(true));
    }

    @Test
    public void simpleSunset() {
        SolarTime sydney = SolarTime.ofLocation(-33.85, 151.2, 0, "SIMPLE");
        PlainDate date = PlainDate.of(2017, this.doy);
        PlainTime sunset = date.get(sydney.sunset()).get().toZonalTimestamp("Australia/Sydney").toTime();
        PlainTime expected = PlainTime.of(this.hourSunset, this.minuteSunset);
        assertThat(
            sunset.toString(),
            Math.abs(ClockUnit.MINUTES.between(expected, sunset)) <= 2,
            is(true));
    }

    @Test
    public void simpleEquationOfTimeAtNoon() {
        PlainTimestamp tsp = PlainDate.of(2017, this.doy).atTime(12, 0);
        Moment m = tsp.inTimezone(() -> "Australia/Sydney");
        double delta = Math.abs(SolarTime.equationOfTime(m, "SIMPLE") - this.eqt * 60.0);
        assertThat(
            tsp.toString() + " => " + Double.toString(delta),
            delta < 60.0, // ~ 1 minute
            is(true));
    }

    @Test
    public void noaaSunrise() {
        SolarTime sydney = SolarTime.ofLocation(-33.85, 151.2, 0, "NOAA");
        PlainDate date = PlainDate.of(2017, this.doy);
        PlainTime sunrise = date.get(sydney.sunrise()).get().toZonalTimestamp("Australia/Sydney").toTime();
        PlainTime expected = PlainTime.of(this.hourSunrise, this.minuteSunrise);
        assertThat(
            sunrise.toString(),
            Math.abs(ClockUnit.MINUTES.between(expected, sunrise)) == 0, // exact agreement in minute precision
            is(true));
    }

    @Test
    public void noaaSunset() {
        SolarTime sydney = SolarTime.ofLocation(-33.85, 151.2, 0, "NOAA");
        PlainDate date = PlainDate.of(2017, this.doy);
        PlainTime sunset = date.get(sydney.sunset()).get().toZonalTimestamp("Australia/Sydney").toTime();
        PlainTime expected = PlainTime.of(this.hourSunset, this.minuteSunset);
        assertThat(
            sunset.toString(),
            Math.abs(ClockUnit.MINUTES.between(expected, sunset)) == 0, // exact agreement in minute precision
            is(true));
    }

    @Test
    public void noaaEquationOfTimeAtNoon() {
        PlainTimestamp tsp = PlainDate.of(2017, this.doy).atTime(12, 0);
        Moment m = tsp.inTimezone(() -> "Australia/Sydney");
        double delta = Math.abs(SolarTime.equationOfTime(m, "NOAA") - this.eqt * 60.0);
        assertThat(
            tsp.toString() + " => " + Double.toString(delta),
            delta < 1.0, // ~ 1 second
            is(true));
    }

    @Test
    public void ccSunrise() {
        SolarTime sydney = SolarTime.ofLocation(-33.85, 151.2, 0, StdSolarCalculator.CC);
        PlainDate date = PlainDate.of(2017, this.doy);
        PlainTime sunrise = date.get(sydney.sunrise()).get().toZonalTimestamp("Australia/Sydney").toTime();
        PlainTime expected = PlainTime.of(this.hourSunrise, this.minuteSunrise);
        assertThat(
            sunrise.toString(),
            Math.abs(ClockUnit.MINUTES.between(expected, sunrise)) == 0, // exact agreement in minute precision
            is(true));
    }

    @Test
    public void ccSunset() {
        SolarTime sydney = SolarTime.ofLocation(-33.85, 151.2, 0, StdSolarCalculator.CC);
        PlainDate date = PlainDate.of(2017, this.doy);
        PlainTime sunset = date.get(sydney.sunset()).get().toZonalTimestamp("Australia/Sydney").toTime();
        PlainTime expected = PlainTime.of(this.hourSunset, this.minuteSunset);
        assertThat(
            sunset.toString(),
            Math.abs(ClockUnit.MINUTES.between(expected, sunset)) == 0, // exact agreement in minute precision
            is(true));
    }

    @Test
    public void time4jSunrise() {
        SolarTime sydney = SolarTime.ofLocation(-33.85, 151.2, 0, StdSolarCalculator.TIME4J);
        PlainDate date = PlainDate.of(2017, this.doy);
        PlainTime sunrise = date.get(sydney.sunrise()).get().toZonalTimestamp("Australia/Sydney").toTime();
        PlainTime expected = PlainTime.of(this.hourSunrise, this.minuteSunrise);
        assertThat(
            sunrise.toString(),
            Math.abs(ClockUnit.MINUTES.between(expected, sunrise)) == 0, // exact agreement in minute precision
            is(true));
    }

    @Test
    public void time4jSunset() {
        SolarTime sydney = SolarTime.ofLocation(-33.85, 151.2, 0, StdSolarCalculator.TIME4J);
        PlainDate date = PlainDate.of(2017, this.doy);
        PlainTime sunset = date.get(sydney.sunset()).get().toZonalTimestamp("Australia/Sydney").toTime();
        PlainTime expected = PlainTime.of(this.hourSunset, this.minuteSunset);
        assertThat(
            sunset.toString(),
            Math.abs(ClockUnit.MINUTES.between(expected, sunset)) == 0, // exact agreement in minute precision
            is(true));
    }

}
